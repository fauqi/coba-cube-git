
flash_memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000167c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001788  08001788  00011788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  080017bc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080017bc  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e08  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001485  00000000  00000000  00023e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  000252c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f6  00000000  00000000  00025ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000641a  00000000  00000000  0003c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007feb4  00000000  00000000  00042ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012dc  00000000  00000000  000c29b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001770 	.word	0x08001770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001770 	.word	0x08001770

0800014c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e016      	b.n	8000188 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000160:	3301      	adds	r3, #1
 8000162:	029b      	lsls	r3, r3, #10
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	429a      	cmp	r2, r3
 8000168:	d20b      	bcs.n	8000182 <GetPage+0x36>
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000170:	029b      	lsls	r3, r3, #10
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	429a      	cmp	r2, r3
 8000176:	d304      	bcc.n	8000182 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800017e:	029b      	lsls	r3, r3, #10
 8000180:	e006      	b.n	8000190 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3301      	adds	r3, #1
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	2b7f      	cmp	r3, #127	; 0x7f
 800018c:	dde5      	ble.n	800015a <GetPage+0xe>
	  }
  }

  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800019c:	b5b0      	push	{r4, r5, r7, lr}
 800019e:	b08a      	sub	sp, #40	; 0x28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	4613      	mov	r3, r2
 80001a8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80001ae:	f000 fb95 	bl	80008dc <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80001b2:	68f8      	ldr	r0, [r7, #12]
 80001b4:	f7ff ffca 	bl	800014c <GetPage>
 80001b8:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80001ba:	88fb      	ldrh	r3, [r7, #6]
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4413      	add	r3, r2
 80001c4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80001c6:	69f8      	ldr	r0, [r7, #28]
 80001c8:	f7ff ffc0 	bl	800014c <GetPage>
 80001cc:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001ce:	4b20      	ldr	r3, [pc, #128]	; (8000250 <Flash_Write_Data+0xb4>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80001d4:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <Flash_Write_Data+0xb4>)
 80001d6:	6a3b      	ldr	r3, [r7, #32]
 80001d8:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	6a3b      	ldr	r3, [r7, #32]
 80001de:	1ad3      	subs	r3, r2, r3
 80001e0:	0a9b      	lsrs	r3, r3, #10
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a1a      	ldr	r2, [pc, #104]	; (8000250 <Flash_Write_Data+0xb4>)
 80001e6:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	4619      	mov	r1, r3
 80001ee:	4818      	ldr	r0, [pc, #96]	; (8000250 <Flash_Write_Data+0xb4>)
 80001f0:	f000 fc66 	bl	8000ac0 <HAL_FLASHEx_Erase>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d01f      	beq.n	800023a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80001fa:	f000 fba5 	bl	8000948 <HAL_FLASH_GetError>
 80001fe:	4603      	mov	r3, r0
 8000200:	e022      	b.n	8000248 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	4413      	add	r3, r2
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	461c      	mov	r4, r3
 8000210:	4615      	mov	r5, r2
 8000212:	4622      	mov	r2, r4
 8000214:	462b      	mov	r3, r5
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	2002      	movs	r0, #2
 800021a:	f000 faef 	bl	80007fc <HAL_FLASH_Program>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d106      	bne.n	8000232 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3304      	adds	r3, #4
 8000228:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022c:	3301      	adds	r3, #1
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
 8000230:	e003      	b.n	800023a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000232:	f000 fb89 	bl	8000948 <HAL_FLASH_GetError>
 8000236:	4603      	mov	r3, r0
 8000238:	e006      	b.n	8000248 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800023e:	429a      	cmp	r2, r3
 8000240:	dbdf      	blt.n	8000202 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000242:	f000 fb71 	bl	8000928 <HAL_FLASH_Lock>

	   return 0;
 8000246:	2300      	movs	r3, #0
}
 8000248:	4618      	mov	r0, r3
 800024a:	3728      	adds	r7, #40	; 0x28
 800024c:	46bd      	mov	sp, r7
 800024e:	bdb0      	pop	{r4, r5, r7, pc}
 8000250:	2000002c 	.word	0x2000002c

08000254 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3304      	adds	r3, #4
 800026e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	3304      	adds	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	1e5a      	subs	r2, r3, #1
 800027a:	80fa      	strh	r2, [r7, #6]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d000      	beq.n	8000282 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000280:	e7ef      	b.n	8000262 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000282:	bf00      	nop
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
	...

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 f948 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f82a 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f86e 	bl	800037c <MX_GPIO_Init>
//	  {
//	  Flash_Write_Data(0X0800FC00, data, 2);
//	  Flash_Read_Data(0X0800FC00 , Rx_Data, 10);
//	  HAL_Delay(10000);
//	  }
	  Flash_Write_Data(0X0800FC00, data2, 2);
 80002a0:	2202      	movs	r2, #2
 80002a2:	490e      	ldr	r1, [pc, #56]	; (80002dc <main+0x4c>)
 80002a4:	480e      	ldr	r0, [pc, #56]	; (80002e0 <main+0x50>)
 80002a6:	f7ff ff79 	bl	800019c <Flash_Write_Data>
	  Flash_Read_Data(0X0800FC00 , Rx_Data, 10);
 80002aa:	220a      	movs	r2, #10
 80002ac:	490d      	ldr	r1, [pc, #52]	; (80002e4 <main+0x54>)
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <main+0x50>)
 80002b0:	f7ff ffd0 	bl	8000254 <Flash_Read_Data>
	  HAL_Delay(60000);
 80002b4:	f64e 2060 	movw	r0, #60000	; 0xea60
 80002b8:	f000 f998 	bl	80005ec <HAL_Delay>

	  i = (i & ~(1 << 1)) | (a << 1);
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <main+0x58>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	b25a      	sxtb	r2, r3
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <main+0x5c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <main+0x58>)
 80002d8:	701a      	strb	r2, [r3, #0]
	  Flash_Write_Data(0X0800FC00, data2, 2);
 80002da:	e7e1      	b.n	80002a0 <main+0x10>
 80002dc:	2000003c 	.word	0x2000003c
 80002e0:	0800fc00 	.word	0x0800fc00
 80002e4:	20000044 	.word	0x20000044
 80002e8:	2000006d 	.word	0x2000006d
 80002ec:	2000006c 	.word	0x2000006c

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	; 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fa2e 	bl	8001760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fe05 	bl	8000f48 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000344:	f000 f874 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2302      	movs	r3, #2
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f001 f872 	bl	800144c <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036e:	f000 f85f 	bl	8000430 <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	; 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a23      	ldr	r2, [pc, #140]	; (8000424 <MX_GPIO_Init+0xa8>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a17      	ldr	r2, [pc, #92]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_GPIO_Init+0xa8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4812      	ldr	r0, [pc, #72]	; (8000428 <MX_GPIO_Init+0xac>)
 80003e0:	f000 fd9a 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	480a      	ldr	r0, [pc, #40]	; (8000428 <MX_GPIO_Init+0xac>)
 80003fe:	f000 fc07 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_GPIO_Init+0xb0>)
 8000418:	f000 fbfa 	bl	8000c10 <HAL_GPIO_Init>

}
 800041c:	bf00      	nop
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	40011000 	.word	0x40011000
 800042c:	40010c00 	.word	0x40010c00

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HAL_MspInit+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a0d      	ldr	r2, [pc, #52]	; (800047c <HAL_MspInit+0x40>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <HAL_MspInit+0x40>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_MspInit+0x40>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_MspInit+0x40>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <HAL_MspInit+0x40>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <NMI_Handler+0x4>

08000486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <MemManage_Handler+0x4>

08000492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <UsageFault_Handler+0x4>

0800049e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f875 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000502:	f7ff ffe4 	bl	80004ce <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f001 f907 	bl	8001718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff fec1 	bl	8000290 <main>
  bx lr
 800050e:	4770      	bx	lr
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000518:	080017b0 	.word	0x080017b0
  ldr r2, =_sbss
 800051c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000520:	20000098 	.word	0x20000098

08000524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_2_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f92b 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff ff7a 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f935 	bl	80007e2 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x20>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000070 	.word	0x20000070

080005d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_GetTick+0x10>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000070 	.word	0x20000070

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffe0 	bl	80005d8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff49 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff5e 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb0 	bl	8000750 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <HAL_FLASH_Program+0xd8>)
 8000818:	7e1b      	ldrb	r3, [r3, #24]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d101      	bne.n	8000822 <HAL_FLASH_Program+0x26>
 800081e:	2302      	movs	r3, #2
 8000820:	e054      	b.n	80008cc <HAL_FLASH_Program+0xd0>
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <HAL_FLASH_Program+0xd8>)
 8000824:	2201      	movs	r2, #1
 8000826:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000828:	f24c 3050 	movw	r0, #50000	; 0xc350
 800082c:	f000 f8b2 	bl	8000994 <FLASH_WaitForLastOperation>
 8000830:	4603      	mov	r3, r0
 8000832:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d144      	bne.n	80008c4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d102      	bne.n	8000846 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000840:	2301      	movs	r3, #1
 8000842:	757b      	strb	r3, [r7, #21]
 8000844:	e007      	b.n	8000856 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d102      	bne.n	8000852 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800084c:	2302      	movs	r3, #2
 800084e:	757b      	strb	r3, [r7, #21]
 8000850:	e001      	b.n	8000856 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000852:	2304      	movs	r3, #4
 8000854:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000856:	2300      	movs	r3, #0
 8000858:	75bb      	strb	r3, [r7, #22]
 800085a:	e02d      	b.n	80008b8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	005a      	lsls	r2, r3, #1
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	eb02 0c03 	add.w	ip, r2, r3
 8000866:	7dbb      	ldrb	r3, [r7, #22]
 8000868:	0119      	lsls	r1, r3, #4
 800086a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086e:	f1c1 0620 	rsb	r6, r1, #32
 8000872:	f1a1 0020 	sub.w	r0, r1, #32
 8000876:	fa22 f401 	lsr.w	r4, r2, r1
 800087a:	fa03 f606 	lsl.w	r6, r3, r6
 800087e:	4334      	orrs	r4, r6
 8000880:	fa23 f000 	lsr.w	r0, r3, r0
 8000884:	4304      	orrs	r4, r0
 8000886:	fa23 f501 	lsr.w	r5, r3, r1
 800088a:	b2a3      	uxth	r3, r4
 800088c:	4619      	mov	r1, r3
 800088e:	4660      	mov	r0, ip
 8000890:	f000 f864 	bl	800095c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000894:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000898:	f000 f87c 	bl	8000994 <FLASH_WaitForLastOperation>
 800089c:	4603      	mov	r3, r0
 800089e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_FLASH_Program+0xdc>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_FLASH_Program+0xdc>)
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80008b2:	7dbb      	ldrb	r3, [r7, #22]
 80008b4:	3301      	adds	r3, #1
 80008b6:	75bb      	strb	r3, [r7, #22]
 80008b8:	7dba      	ldrb	r2, [r7, #22]
 80008ba:	7d7b      	ldrb	r3, [r7, #21]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3cd      	bcc.n	800085c <HAL_FLASH_Program+0x60>
 80008c0:	e000      	b.n	80008c4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80008c2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_FLASH_Program+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	761a      	strb	r2, [r3, #24]

  return status;
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	371c      	adds	r7, #28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d4:	20000078 	.word	0x20000078
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_FLASH_Unlock+0x40>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00d      	beq.n	800090e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_FLASH_Unlock+0x40>)
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_FLASH_Unlock+0x44>)
 80008f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_FLASH_Unlock+0x40>)
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_FLASH_Unlock+0x48>)
 80008fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_FLASH_Unlock+0x40>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800090e:	79fb      	ldrb	r3, [r7, #7]
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000
 8000920:	45670123 	.word	0x45670123
 8000924:	cdef89ab 	.word	0xcdef89ab

08000928 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_FLASH_Lock+0x1c>)
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_FLASH_Lock+0x1c>)
 8000932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000936:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <HAL_FLASH_GetError+0x10>)
 800094e:	69db      	ldr	r3, [r3, #28]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000078 	.word	0x20000078

0800095c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <FLASH_Program_HalfWord+0x30>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <FLASH_Program_HalfWord+0x34>)
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <FLASH_Program_HalfWord+0x34>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	887a      	ldrh	r2, [r7, #2]
 800097e:	801a      	strh	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000078 	.word	0x20000078
 8000990:	40022000 	.word	0x40022000

08000994 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fe1c 	bl	80005d8 <HAL_GetTick>
 80009a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80009a2:	e010      	b.n	80009c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009aa:	d00c      	beq.n	80009c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <FLASH_WaitForLastOperation+0x2e>
 80009b2:	f7ff fe11 	bl	80005d8 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d201      	bcs.n	80009c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80009c2:	2303      	movs	r3, #3
 80009c4:	e025      	b.n	8000a12 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1e8      	bne.n	80009a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009e0:	2220      	movs	r2, #32
 80009e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10b      	bne.n	8000a08 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <FLASH_WaitForLastOperation+0x88>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000a08:	f000 f80a 	bl	8000a20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d009      	beq.n	8000a4a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a40:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d009      	beq.n	8000a6a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a60:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00b      	beq.n	8000a8e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <FLASH_SetErrorCode+0x9c>)
 8000a80:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a88:	f023 0301 	bic.w	r3, r3, #1
 8000a8c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f240 1201 	movw	r2, #257	; 0x101
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d106      	bne.n	8000aa6 <FLASH_SetErrorCode+0x86>
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	61d3      	str	r3, [r2, #28]
}  
 8000aa4:	e002      	b.n	8000aac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <FLASH_SetErrorCode+0x98>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60d3      	str	r3, [r2, #12]
}  
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	20000078 	.word	0x20000078

08000ac0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <HAL_FLASHEx_Erase+0xd0>)
 8000ad4:	7e1b      	ldrb	r3, [r3, #24]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d101      	bne.n	8000ade <HAL_FLASHEx_Erase+0x1e>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e053      	b.n	8000b86 <HAL_FLASHEx_Erase+0xc6>
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <HAL_FLASHEx_Erase+0xd0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d116      	bne.n	8000b1a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000aec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000af0:	f7ff ff50 	bl	8000994 <FLASH_WaitForLastOperation>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d141      	bne.n	8000b7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 f84c 	bl	8000b98 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b04:	f7ff ff46 	bl	8000994 <FLASH_WaitForLastOperation>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_FLASHEx_Erase+0xd4>)
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <HAL_FLASHEx_Erase+0xd4>)
 8000b12:	f023 0304 	bic.w	r3, r3, #4
 8000b16:	6113      	str	r3, [r2, #16]
 8000b18:	e031      	b.n	8000b7e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b1e:	f7ff ff39 	bl	8000994 <FLASH_WaitForLastOperation>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d12a      	bne.n	8000b7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	e019      	b.n	8000b6c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f000 f849 	bl	8000bd0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b42:	f7ff ff27 	bl	8000994 <FLASH_WaitForLastOperation>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_FLASHEx_Erase+0xd4>)
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_FLASHEx_Erase+0xd4>)
 8000b50:	f023 0302 	bic.w	r3, r3, #2
 8000b54:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	601a      	str	r2, [r3, #0]
            break;
 8000b62:	e00c      	b.n	8000b7e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b6a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	029a      	lsls	r2, r3, #10
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3dc      	bcc.n	8000b38 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_FLASHEx_Erase+0xd0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	761a      	strb	r2, [r3, #24]

  return status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000078 	.word	0x20000078
 8000b94:	40022000 	.word	0x40022000

08000b98 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <FLASH_MassErase+0x30>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <FLASH_MassErase+0x34>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <FLASH_MassErase+0x34>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <FLASH_MassErase+0x34>)
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <FLASH_MassErase+0x34>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000078 	.word	0x20000078
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <FLASH_PageErase+0x38>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <FLASH_PageErase+0x3c>)
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <FLASH_PageErase+0x3c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <FLASH_PageErase+0x3c>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <FLASH_PageErase+0x3c>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <FLASH_PageErase+0x3c>)
 8000bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000078 	.word	0x20000078
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e169      	b.n	8000ef8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c24:	2201      	movs	r2, #1
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 8158 	bne.w	8000ef2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a9a      	ldr	r2, [pc, #616]	; (8000eb0 <HAL_GPIO_Init+0x2a0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d05e      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c4c:	4a98      	ldr	r2, [pc, #608]	; (8000eb0 <HAL_GPIO_Init+0x2a0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d875      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c52:	4a98      	ldr	r2, [pc, #608]	; (8000eb4 <HAL_GPIO_Init+0x2a4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d058      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c58:	4a96      	ldr	r2, [pc, #600]	; (8000eb4 <HAL_GPIO_Init+0x2a4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d86f      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c5e:	4a96      	ldr	r2, [pc, #600]	; (8000eb8 <HAL_GPIO_Init+0x2a8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d052      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c64:	4a94      	ldr	r2, [pc, #592]	; (8000eb8 <HAL_GPIO_Init+0x2a8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d869      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c6a:	4a94      	ldr	r2, [pc, #592]	; (8000ebc <HAL_GPIO_Init+0x2ac>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d04c      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c70:	4a92      	ldr	r2, [pc, #584]	; (8000ebc <HAL_GPIO_Init+0x2ac>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d863      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c76:	4a92      	ldr	r2, [pc, #584]	; (8000ec0 <HAL_GPIO_Init+0x2b0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d046      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a90      	ldr	r2, [pc, #576]	; (8000ec0 <HAL_GPIO_Init+0x2b0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d85d      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d82a      	bhi.n	8000cdc <HAL_GPIO_Init+0xcc>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d859      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <HAL_GPIO_Init+0x80>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000d0b 	.word	0x08000d0b
 8000c94:	08000ce5 	.word	0x08000ce5
 8000c98:	08000cf7 	.word	0x08000cf7
 8000c9c:	08000d39 	.word	0x08000d39
 8000ca0:	08000d3f 	.word	0x08000d3f
 8000ca4:	08000d3f 	.word	0x08000d3f
 8000ca8:	08000d3f 	.word	0x08000d3f
 8000cac:	08000d3f 	.word	0x08000d3f
 8000cb0:	08000d3f 	.word	0x08000d3f
 8000cb4:	08000d3f 	.word	0x08000d3f
 8000cb8:	08000d3f 	.word	0x08000d3f
 8000cbc:	08000d3f 	.word	0x08000d3f
 8000cc0:	08000d3f 	.word	0x08000d3f
 8000cc4:	08000d3f 	.word	0x08000d3f
 8000cc8:	08000d3f 	.word	0x08000d3f
 8000ccc:	08000d3f 	.word	0x08000d3f
 8000cd0:	08000d3f 	.word	0x08000d3f
 8000cd4:	08000ced 	.word	0x08000ced
 8000cd8:	08000d01 	.word	0x08000d01
 8000cdc:	4a79      	ldr	r2, [pc, #484]	; (8000ec4 <HAL_GPIO_Init+0x2b4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ce2:	e02c      	b.n	8000d3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e029      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e024      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e01f      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	330c      	adds	r3, #12
 8000d06:	623b      	str	r3, [r7, #32]
          break;
 8000d08:	e01a      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d12:	2304      	movs	r3, #4
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e013      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	611a      	str	r2, [r3, #16]
          break;
 8000d2a:	e009      	b.n	8000d40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	615a      	str	r2, [r3, #20]
          break;
 8000d36:	e003      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          break;
 8000d3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d801      	bhi.n	8000d4a <HAL_GPIO_Init+0x13a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	e001      	b.n	8000d4e <HAL_GPIO_Init+0x13e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	; 0xff
 8000d54:	d802      	bhi.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x152>
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3b08      	subs	r3, #8
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	210f      	movs	r1, #15
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	401a      	ands	r2, r3
 8000d74:	6a39      	ldr	r1, [r7, #32]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 80b1 	beq.w	8000ef2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da8:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2bc>)
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_GPIO_Init+0x2c0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d013      	beq.n	8000dfc <HAL_GPIO_Init+0x1ec>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <HAL_GPIO_Init+0x2c4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d00d      	beq.n	8000df8 <HAL_GPIO_Init+0x1e8>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <HAL_GPIO_Init+0x2c8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d007      	beq.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d101      	bne.n	8000df0 <HAL_GPIO_Init+0x1e0>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e002      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	f002 0203 	and.w	r2, r2, #3
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	4093      	lsls	r3, r2
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0e:	492f      	ldr	r1, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2bc>)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	492c      	ldr	r1, [pc, #176]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4928      	ldr	r1, [pc, #160]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	491e      	ldr	r1, [pc, #120]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	4918      	ldr	r1, [pc, #96]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4914      	ldr	r1, [pc, #80]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d021      	beq.n	8000ee4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60cb      	str	r3, [r1, #12]
 8000eac:	e021      	b.n	8000ef2 <HAL_GPIO_Init+0x2e2>
 8000eae:	bf00      	nop
 8000eb0:	10320000 	.word	0x10320000
 8000eb4:	10310000 	.word	0x10310000
 8000eb8:	10220000 	.word	0x10220000
 8000ebc:	10210000 	.word	0x10210000
 8000ec0:	10120000 	.word	0x10120000
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	40011400 	.word	0x40011400
 8000ee0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_GPIO_Init+0x304>)
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	4909      	ldr	r1, [pc, #36]	; (8000f14 <HAL_GPIO_Init+0x304>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	fa22 f303 	lsr.w	r3, r2, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f47f ae8e 	bne.w	8000c24 <HAL_GPIO_Init+0x14>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	372c      	adds	r7, #44	; 0x2c
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40010400 	.word	0x40010400

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	611a      	str	r2, [r3, #16]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e272      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8087 	beq.w	8001076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f68:	4b92      	ldr	r3, [pc, #584]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d00c      	beq.n	8000f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f74:	4b8f      	ldr	r3, [pc, #572]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d112      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
 8000f80:	4b8c      	ldr	r3, [pc, #560]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8e:	4b89      	ldr	r3, [pc, #548]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d06c      	beq.n	8001074 <HAL_RCC_OscConfig+0x12c>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d168      	bne.n	8001074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e24c      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x76>
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a7f      	ldr	r2, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e02e      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x98>
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a77      	ldr	r2, [pc, #476]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e01d      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0xbc>
 8000fea:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a71      	ldr	r2, [pc, #452]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6e      	ldr	r2, [pc, #440]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e00b      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8001004:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fad8 	bl	80005d8 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fad4 	bl	80005d8 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e200      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0xe4>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fac4 	bl	80005d8 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fac0 	bl	80005d8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e1ec      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x10c>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d063      	beq.n	800114a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e1c0      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4939      	ldr	r1, [pc, #228]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	e03a      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fa79 	bl	80005d8 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fa75 	bl	80005d8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1a1      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e015      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fa58 	bl	80005d8 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fa54 	bl	80005d8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e180      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d03a      	beq.n	80011cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d019      	beq.n	8001192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fa38 	bl	80005d8 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fa34 	bl	80005d8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e160      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 faa6 	bl	80016dc <RCC_Delay>
 8001190:	e01c      	b.n	80011cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fa1e 	bl	80005d8 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119e:	e00f      	b.n	80011c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fa1a 	bl	80005d8 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d908      	bls.n	80011c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e146      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420000 	.word	0x42420000
 80011bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	4b92      	ldr	r3, [pc, #584]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e9      	bne.n	80011a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a6 	beq.w	8001326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b85      	ldr	r3, [pc, #532]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7e      	ldr	r2, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff f9db 	bl	80005d8 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff f9d7 	bl	80005d8 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e103      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b75      	ldr	r3, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x4c8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x312>
 800124c:	4b6f      	ldr	r3, [pc, #444]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a6e      	ldr	r2, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e02d      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x334>
 8001262:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a69      	ldr	r2, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a66      	ldr	r2, [pc, #408]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	e01c      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x356>
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a5d      	ldr	r2, [pc, #372]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e00b      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800129e:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	4b58      	ldr	r3, [pc, #352]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d015      	beq.n	80012ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff f98b 	bl	80005d8 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff f987 	bl	80005d8 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0b1      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ee      	beq.n	80012c6 <HAL_RCC_OscConfig+0x37e>
 80012e8:	e014      	b.n	8001314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff f975 	bl	80005d8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff f971 	bl	80005d8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e09b      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d105      	bne.n	8001326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a3b      	ldr	r2, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d061      	beq.n	8001400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d146      	bne.n	80013d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff f945 	bl	80005d8 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f941 	bl	80005d8 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e06d      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d108      	bne.n	800138c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4921      	ldr	r1, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a19      	ldr	r1, [r3, #32]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	430b      	orrs	r3, r1
 800139e:	491b      	ldr	r1, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff f915 	bl	80005d8 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b2:	f7ff f911 	bl	80005d8 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e03d      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46a>
 80013d0:	e035      	b.n	800143e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_OscConfig+0x4cc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff f8fe 	bl	80005d8 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f8fa 	bl	80005d8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e026      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x498>
 80013fe:	e01e      	b.n	800143e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e019      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
 800140c:	40021000 	.word	0x40021000
 8001410:	40007000 	.word	0x40007000
 8001414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x500>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	429a      	cmp	r2, r3
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0d0      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d910      	bls.n	8001490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4965      	ldr	r1, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d040      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e073      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e06b      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff f84c 	bl	80005d8 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff f848 	bl	80005d8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e053      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d210      	bcs.n	800159c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0207 	bic.w	r2, r3, #7
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f821 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1cc>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1d0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffaa 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	08001798 	.word	0x08001798
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b490      	push	{r4, r7}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_GetSysClockFreq+0xac>)
 8001628:	1d3c      	adds	r4, r7, #4
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001630:	f240 2301 	movw	r3, #513	; 0x201
 8001634:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x40>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x46>
 800165e:	e02b      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001662:	623b      	str	r3, [r7, #32]
      break;
 8001664:	e02b      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3328      	adds	r3, #40	; 0x28
 8001670:	443b      	add	r3, r7
 8001672:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001676:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0c5b      	lsrs	r3, r3, #17
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	3328      	adds	r3, #40	; 0x28
 800168e:	443b      	add	r3, r7
 8001690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800169a:	fb03 f202 	mul.w	r2, r3, r2
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e004      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	623b      	str	r3, [r7, #32]
      break;
 80016b6:	e002      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ba:	623b      	str	r3, [r7, #32]
      break;
 80016bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016be:	6a3b      	ldr	r3, [r7, #32]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc90      	pop	{r4, r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08001788 	.word	0x08001788
 80016d0:	40021000 	.word	0x40021000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	003d0900 	.word	0x003d0900

080016dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <RCC_Delay+0x34>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <RCC_Delay+0x38>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a5b      	lsrs	r3, r3, #9
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f8:	bf00      	nop
  }
  while (Delay --);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	60fa      	str	r2, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f9      	bne.n	80016f8 <RCC_Delay+0x1c>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000000 	.word	0x20000000
 8001714:	10624dd3 	.word	0x10624dd3

08001718 <__libc_init_array>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	2600      	movs	r6, #0
 800171c:	4d0c      	ldr	r5, [pc, #48]	; (8001750 <__libc_init_array+0x38>)
 800171e:	4c0d      	ldr	r4, [pc, #52]	; (8001754 <__libc_init_array+0x3c>)
 8001720:	1b64      	subs	r4, r4, r5
 8001722:	10a4      	asrs	r4, r4, #2
 8001724:	42a6      	cmp	r6, r4
 8001726:	d109      	bne.n	800173c <__libc_init_array+0x24>
 8001728:	f000 f822 	bl	8001770 <_init>
 800172c:	2600      	movs	r6, #0
 800172e:	4d0a      	ldr	r5, [pc, #40]	; (8001758 <__libc_init_array+0x40>)
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <__libc_init_array+0x44>)
 8001732:	1b64      	subs	r4, r4, r5
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	42a6      	cmp	r6, r4
 8001738:	d105      	bne.n	8001746 <__libc_init_array+0x2e>
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001740:	4798      	blx	r3
 8001742:	3601      	adds	r6, #1
 8001744:	e7ee      	b.n	8001724 <__libc_init_array+0xc>
 8001746:	f855 3b04 	ldr.w	r3, [r5], #4
 800174a:	4798      	blx	r3
 800174c:	3601      	adds	r6, #1
 800174e:	e7f2      	b.n	8001736 <__libc_init_array+0x1e>
 8001750:	080017a8 	.word	0x080017a8
 8001754:	080017a8 	.word	0x080017a8
 8001758:	080017a8 	.word	0x080017a8
 800175c:	080017ac 	.word	0x080017ac

08001760 <memset>:
 8001760:	4603      	mov	r3, r0
 8001762:	4402      	add	r2, r0
 8001764:	4293      	cmp	r3, r2
 8001766:	d100      	bne.n	800176a <memset+0xa>
 8001768:	4770      	bx	lr
 800176a:	f803 1b01 	strb.w	r1, [r3], #1
 800176e:	e7f9      	b.n	8001764 <memset+0x4>

08001770 <_init>:
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	bf00      	nop
 8001774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001776:	bc08      	pop	{r3}
 8001778:	469e      	mov	lr, r3
 800177a:	4770      	bx	lr

0800177c <_fini>:
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177e:	bf00      	nop
 8001780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001782:	bc08      	pop	{r3}
 8001784:	469e      	mov	lr, r3
 8001786:	4770      	bx	lr
